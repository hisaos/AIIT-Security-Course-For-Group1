Flawfinder version 2.0.19, (C) 2001-2019 David A. Wheeler.
Number of rules (primarily dangerous function names) in C/C++ ruleset: 222
Examining src/00_zero_divide.c
Examining src/01_ARR01_size.c
Examining src/02_MEM11_inf_heap.c
Examining src/03_MEM30_uaf.c
Examining src/04_FIO03_open_args.c
Examining src/05_ENV30_env.c
Examining src/06_STR32_string_null.c

FINAL RESULTS:

src/02_MEM11_inf_heap.c:30:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination [MS-banned]
  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy
  easily misused).
src/05_ENV30_env.c:11:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker. They can have any content and length, and the same variable can
  be set more than once (CWE-807, CWE-20). Check environment variables
  carefully before using them.
src/02_MEM11_inf_heap.c:8:  [2] (buffer) char:
  Statically-sized arrays can be improperly restricted, leading to potential
  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use
  functions that limit length, or ensure that the size is larger than the
  maximum possible length.
src/02_MEM11_inf_heap.c:14:  [2] (buffer) char:
  Statically-sized arrays can be improperly restricted, leading to potential
  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use
  functions that limit length, or ensure that the size is larger than the
  maximum possible length.
src/04_FIO03_open_args.c:7:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move things
  around to create a race condition, control its ancestors, or change its
  contents? (CWE-362).
src/02_MEM11_inf_heap.c:24:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated; if given one it may
  perform an over-read (it could cause a crash if unprotected) (CWE-126).
src/03_MEM30_uaf.c:11:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for invalid
  pointers [MS-banned] (CWE-120).
src/06_STR32_string_null.c:24:  [1] (buffer) wcslen:
  Does not handle strings that are not \0-terminated; if given one it may
  perform an over-read (it could cause a crash if unprotected) (CWE-126).

ANALYSIS SUMMARY:

Hits = 8
Lines analyzed = 130 in approximately 0.00 seconds (41348 lines/second)
Physical Source Lines of Code (SLOC) = 95
Hits@level = [0]   1 [1]   3 [2]   3 [3]   1 [4]   1 [5]   0
Hits@level+ = [0+]   9 [1+]   8 [2+]   5 [3+]   2 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+] 94.7368 [1+] 84.2105 [2+] 52.6316 [3+] 21.0526 [4+] 10.5263 [5+]   0
Minimum risk level = 1

Not every hit is necessarily a security vulnerability.
You can inhibit a report by adding a comment in this form:
// flawfinder: ignore
Make *sure* it's a false positive!
You can use the option --neverignore to show these.

There may be other security vulnerabilities; review your code!
See 'Secure Programming HOWTO'
(https://dwheeler.com/secure-programs) for more information.
